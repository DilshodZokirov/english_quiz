from configs.logger import loggerimport sqlite3from configs.constants import DB_PATHclass Transactions:	def __init__(self, db_path=DB_PATH) -> None:		self.db_path = db_path		self.connection = sqlite3.Connection(DB_PATH)		self.cursor = self.connection.cursor()		@property	def _connection(self):		return sqlite3.connect(self.db_path)		def execute(self, sql: str, parameters: tuple = None, fetchone=False, fetchall=False, commit=False):		connection = self._connection		connection.set_trace_callback(logger)		cursor = connection.cursor()		data = None		cursor.execute(sql, parameters or tuple())		if commit:			connection.commit()		if fetchone:			data = cursor.fetchone()		if fetchall:			data = cursor.fetchall()		connection.close()		return data		@staticmethod	def format_args(sql, parameters: dict):		sql += " AND ".join([			f' {item} = ?' for item in parameters		])		return sql, tuple(parameters.values())		def commit_and_close(self):		if self.connection and self.cursor:			self.connection.commit()			self.cursor.close()			self.connection.close()